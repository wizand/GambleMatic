@page "/gambleEvents"
@using GambleMaticWebApp.Data
@inject GamblingDataService _gameDataService
<PageTitle>Gamble events</PageTitle>

<h1>Gamble events management page</h1>

<Div id="Insert gambling event">
    <Table Striped Hoverable Bordered>
        <TableRow>
            <TableRowCell>Begin date</TableRowCell>
            <TableRowCell>
                <div class="input-group date" data-provide="datepicker">
                    <input type="date" class="form-control" @bind="newGamblingEvent.BeginDate">
                    <div class="input-group-addon">
                        <span class="glyphicon glyphicon-th"></span>
                    </div>
                </div>
            </TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowCell>End date</TableRowCell>
            <TableRowCell>
                <div class="input-group date" data-provide="datepicker">
                    <input type="date" class="form-control" @bind="newGamblingEvent.EndDate">
                    <div class="input-group-addon">
                        <span class="glyphicon glyphicon-th"></span>
                    </div>
                </div>
            </TableRowCell>
        </TableRow>
        <TableRow>
            <TableRowCell>Tournament name</TableRowCell>
            <TableRowCell>
                <TextEdit @bind-Text="@newGamblingEvent.EventName" Placeholder="Gambling event name" />
            </TableRowCell>
        </TableRow>
    </Table>
    <Button Color="Color.Success" onclick="@AddNewGamblingEventAsync">Save gambling event</Button>

</Div>

<Div id="GamblingEventsList">
    <h2>Gambling events in the database:</h2>
   @*  <Button Color="Color.Primary" Clicked="@UpdateGameResults">Update all results</Button> *@
    <Table Striped Hoverable Bordered>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Begin</TableHeaderCell>
                <TableHeaderCell>End</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
@{
    foreach (var gamblingEvent in @StoredGamblingEvents)
        {
            <TableRow>
                <TableRowCell>@gamblingEvent.EventName</TableRowCell>
                <TableRowCell>@gamblingEvent.BeginDateStr</TableRowCell>
                <TableRowCell>@gamblingEvent.EndDateStr</TableRowCell>
            </TableRow>
                    // <Button Color="Color.Primary" Clicked="@((p) => UpdateGameResult(@game))">Update result</Button>
        }
    }
        </TableBody>
    </Table>
</Div>


@code 
{


    List<GamblingEventViewModel> StoredGamblingEvents = new();
    NewGamblingEventViewModel newGamblingEvent = new();



    protected override async Task OnInitializedAsync()
    {

        //Today = DateTime.UtcNow.ToString("d");
        await RefreshGamblingEventsList();
    }

    public async Task AddNewGamblingEventAsync()
    {
        if (String.IsNullOrWhiteSpace(newGamblingEvent.EventName) ||
             false == newGamblingEvent.IsBeginDateValid() )
        {
            Console.WriteLine("Invalid sporting event object: " + newGamblingEvent.ToString());
            return;
        }

        Console.WriteLine("Creating a new sporting event: " + newGamblingEvent.ToString());

        GamblingEvent ge = new GamblingEvent(newGamblingEvent.EventName, newGamblingEvent.BeginDate, newGamblingEvent.EndDate);
        await _gameDataService.AddGamblingEventToDatabaseAsync(ge);
        newGamblingEvent = new();
        await RefreshGamblingEventsList();

    }






    public async Task RefreshGamblingEventsList()
    { 
        var gamblingEventModels = await _gameDataService.GetGamblingEventModelsFromDatabaseAsync();
        StoredGamblingEvents = new();
        foreach (GamblingEvent gambleEvent in gamblingEventModels)
        {
            StoredGamblingEvents.Add(new GamblingEventViewModel(gambleEvent));
        }
    }

    public class NewGamblingEventViewModel
    {
        public string? EventName { get; set; }
        public DateTime BeginDate { get; set; }
        public DateTime EndDate { get; set; }

        public NewGamblingEventViewModel()
        {
            BeginDate = DateTime.UtcNow;
            EndDate = DateTime.UtcNow.AddDays(1);
        }
        public bool IsBeginDateValid()
        {
            //Is begin before end?
            return true;
        }

        public override string ToString()
        {
            return $"NewSportingEventViewModel=[EventName={EventName} BeginDate={BeginDate.ToString()} EndDate={EndDate.ToString()} ]";
        }
    }

}