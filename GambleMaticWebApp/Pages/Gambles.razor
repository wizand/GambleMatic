@page "/gambles"
@using GambleMaticWebApp.Data
@inject GamblingDataService _gameDataService
@inject GamblingEventStateService _gamblingEventStateService
<PageTitle>Players</PageTitle>

<h1>Gambles Management page</h1>






<Div id="playerSelectionDiv" Class="row">
    <Div Class="td">
        <Span>Player:</Span>
    </Div>
    <Div Class="td">
        <Select TValue="int" SelectedValueChanged="@OnSelectedPlayerChanged">
            @{
                int index = 0;
                foreach (var player in StoredPlayers)
                {
                        <SelectItem Value="@index">@player.Name</SelectItem>
                    index = index + 1;
                }
            }
        </Select>
    </Div>
    <Div Class="td">Event:</Div>
    <Div Class="td">
        <Select TValue="int" SelectedValueChanged="@OnSelectedEventChanged">
            @{
                int index = 0;
                foreach (var gamblingEvent in StoredGamblingEvents)
                {
                    <SelectItem Value="@index">@gamblingEvent.EventName</SelectItem>
                    index = index + 1;
                }
            }
        </Select>
    </Div>
</Div>



<Div id="gamesListDiv" Class="container">
    <Div Class="row">
        <Div Class="col">
            <h2>@HeaderText</h2>
            <h3>@GambleRowChecksum</h3>
            
        </Div>
    </Div>
    <Div Class="row" Style="margin-bottom: 50px;">
        <Div Class="col"><TextEdit @bind-Text="@GambleRowChecksumToSave" Placeholder="Enter a gamble checksum here" /></Div>
        <Div Class="col"><Button Color="Color.Success" onclick="@OnSavePlayerGambleFromChecksum">Save gamble row from checksum</Button></Div>
    </Div>
    <Div Class="row">
         <Div Class="col">
             <Button Color="Color.Success" onclick="@OnSavePlayerGamble">Save gamble row for player!</Button>
         </Div>
    </Div>
    <Div Class="row">
            
        <Div Class="col">
            <Table Striped Hoverable Bordered>
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Date</TableHeaderCell>
                        <TableHeaderCell>Home</TableHeaderCell>
                        <TableHeaderCell>Away</TableHeaderCell>
                        <TableHeaderCell>Result guess</TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
            @{
                foreach (var gamePrediction in ListOfGamePredictions)
                {
                        <TableRow>
                            <TableRowCell>@gamePrediction.GameView.GameDayStr</TableRowCell>
                            <TableRowCell Style="text-align: center;">@gamePrediction.GameView.Home</TableRowCell>
                            <TableRowCell Style="text-align: center;">@gamePrediction.GameView.Away</TableRowCell>
                            <TableRowCell>
                                <RadioGroup TValue="int" Name="game result" @bind-CheckedValue="gamePrediction.Prediction" Buttons>
                                    <Radio Value="-1">HOME</Radio>
                                    <Radio Value="0">DRAW</Radio>
                                    <Radio Value="1">AWAY</Radio>
                                </RadioGroup>
                            </TableRowCell>

                        </TableRow>
                }
            }
                </TableBody>
            </Table>
            <Button Color="Color.Success" onclick="@OnSavePlayerGamble">Save gamble for player!</Button>
        </Div>
    </Div>

</Div>

<Div id="extraGambles">
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>Semi final team 1:</TableHeaderCell>
                <TableHeaderCell>Semi final team 2:</TableHeaderCell>
                <TableHeaderCell>Semi final team 3:</TableHeaderCell>
                <TableHeaderCell>Semi final team 4:</TableHeaderCell>
                <TableHeaderCell>Silver medal team:</TableHeaderCell>
                <TableHeaderCell>Gold medal team:</TableHeaderCell>
                <TableHeaderCell>Goals in tournament:</TableHeaderCell>
            </TableRow>
            <TableRow>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.SemiFinalTeam1">
                        @foreach (var team in TeamsList) { <SelectItem Value="@team">@team</SelectItem> }
                    </Select>
                </TableRowCell>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.SemiFinalTeam2">
                        @foreach (var team in TeamsList) { <SelectItem Value="@team">@team</SelectItem> }
                    </Select>
                </TableRowCell>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.SemiFinalTeam3">
                        @foreach (var team in TeamsList) { <SelectItem Value="@team">@team</SelectItem> }
                    </Select>
                </TableRowCell>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.SemiFinalTeam4">
                        @foreach (var team in TeamsList) { <SelectItem Value="@team">@team</SelectItem> }
                    </Select>
                </TableRowCell>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.SilverMedalTeam">
                        @foreach (var team in TeamsList) { <SelectItem Value="@team">@team</SelectItem> }
                    </Select>
                </TableRowCell>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.GoldMedalTeam">
                        @foreach (var team in TeamsList) { <SelectItem Value="@team">@team</SelectItem> }
                    </Select>
                </TableRowCell>
                <TableRowCell>
                    <Select TValue="string" @bind-SelectedValue="@extraGamblesViewModel.GoalAmount">
                        @foreach (var goals in GoalAmountOptions) { <SelectItem Value="@goals">@goals</SelectItem> }
                    </Select>
                </TableRowCell>
            </TableRow>
        </TableHeader>
    </Table>
    <Button Color="Color.Success" onclick="@OnSavePlayerExtraGambles">Save extra gambles for player!</Button>
</Div>


@code {

    GamblingEventViewModel selectedGamblingEvent { get; set; } = new();
    List<GamblingEventViewModel> StoredGamblingEvents { get; set; } = new();


    ExtraGamblesViewModel extraGamblesViewModel { get; set; } = new();

    PlayerModelViewModel selectedPlayer { get; set; } = new();
    List<PlayerModelViewModel> StoredPlayers = new();

    List<GameModelViewModel> StoredGamesInGamblingEvent = new();
    List<GameAndPredictionViewModel> ListOfGamePredictions = new();

    public string GambleRowChecksum { get; set; } = "";
    public string GambleRowChecksumToSave { get; set; } = "";

    public string HeaderText { get; set; } = "Create new gambles!";
    public bool IsCreatingNew = true;
    protected override async Task OnInitializedAsync()
    {
        await RefreshPlayersList();
        await RefreshGamblingEventsList();
        //StoredGamblingEvents = await _gamblingEventStateService.GetAllGamblingEventViewModels();
        selectedGamblingEvent = await _gamblingEventStateService.GetSelectedGamblingEventAsViewModel();
        StoredGamesInGamblingEvent = selectedGamblingEvent.GamesInEvent;
        _gameDataService.RefreshTeamsCacheFromList(StoredGamesInGamblingEvent);
        await OnSelectedPlayerChanged(0);
        await RefreshGamesList();



    }

    public List<string> TeamsList 
    {
        get 
        {
            if ( _gameDataService.AllTeams == null)
            {
                _gameDataService.RefreshTeamsCacheFromList(StoredGamesInGamblingEvent);
            }
            return _gameDataService.AllTeams;
        }
    }

    public List<string> GoalAmountOptions 
    {
        get 
        {
            return _gameDataService.GoalAmountOptions;
        }
    }

    public async Task OnSelectedPlayerChanged(int selectedValue)
    {
        selectedPlayer = StoredPlayers[selectedValue];


        Console.WriteLine("Selected player index: " + selectedValue + " selected player name: " + selectedPlayer.Name);
        await RefreshGamblePreditionsForPlayer();
    }


    public async Task OnSelectedEventChanged(int selectedValue)
    {
        _gamblingEventStateService.SetSelectedGamblingEvent(selectedValue);
        selectedGamblingEvent = await _gamblingEventStateService.GetSelectedGamblingEventAsViewModel();

        Console.WriteLine("Selected event changed to: " + selectedValue);
        await RefreshGamesList();
        await RefreshGamblePreditionsForPlayer();
    }

    public async Task RefreshGamblingEventsList()
    {
        StoredGamblingEvents = await _gamblingEventStateService.GetAllGamblingEventViewModels();
    }



    public async Task RefreshGamblePreditionsForPlayer() 
    {
        var ctw = selectedPlayer.GambleItemsForEvent(selectedGamblingEvent);
        Console.WriteLine("Selected player name: " + selectedPlayer.Name + " gambles: " + ctw.Count);

        //There are no previous games saved or the data doesnt correspond to the amount of games
        if (ctw == null || ctw.Count == 0 || ctw.Count != StoredGamesInGamblingEvent.Count)
        {
            HeaderText = "Create new gambles for player " + selectedPlayer.Name;
            IsCreatingNew = true;
            await RefreshNewGamesAndPredictionsList();
        }
        else
        {
            HeaderText = "Editing gambles for player " + selectedPlayer.Name;
            IsCreatingNew = false;
            await RefreshExistingGamblesAndPredictionsList(ctw);
        }



        int selectedId = selectedGamblingEvent.GamblingEventId;
        await _gamblingEventStateService.UpdateGamblingEvents();
        await RefreshGamblingEventsList();
        selectedGamblingEvent = StoredGamblingEvents.Find(x => x.GamblingEventId == selectedId);

        ExtraGamblesModel? egModel = selectedGamblingEvent.GetExtraGamblingModelForPlayer(selectedPlayer.GetPlayerModel());
        
        //ExtraGamblesModel egModel = selectedPlayer.GetPlayerModel().ExtraGambles;
        if (egModel != null)
        {
            extraGamblesViewModel = new ExtraGamblesViewModel(egModel);
        }
        else
        {
            string defaultTeam = TeamsList[1];
            string defaultGoals = GoalAmountOptions[1];
            extraGamblesViewModel = new ExtraGamblesViewModel(defaultTeam, defaultTeam, defaultTeam, defaultTeam, defaultTeam, defaultTeam, defaultGoals);
        }


        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        foreach (var prediction in ListOfGamePredictions)
        {
            switch (prediction.Prediction)
            {
                case -1:
                    sb.Append("H");
                    break;
                case 0:
                    sb.Append("D");
                    break;
                case 1:
                    sb.Append("A");
                    break;
            }
        }

        GambleRowChecksum = sb.ToString();


    }




    public async Task OnSavePlayerExtraGambles() 
    {
        var player = selectedPlayer.GetPlayerModel();
        ExtraGamblesModel extraGambles = extraGamblesViewModel.GetExtraGambleModel();


        //if (player.ExtraGambles == null)
        if (extraGambles == null)
        {
            extraGambles = new ExtraGamblesModel();
        } 

        extraGambles.SemifinalTeamOne = extraGamblesViewModel.SemiFinalTeam1;
        extraGambles.SemifinalTeamTwo = extraGamblesViewModel.SemiFinalTeam2;
        extraGambles.SemifinalTeamThree = extraGamblesViewModel.SemiFinalTeam3;
        extraGambles.SemifinalTeamFour = extraGamblesViewModel.SemiFinalTeam4;
        extraGambles.SilverTeam = extraGamblesViewModel.SilverMedalTeam;
        extraGambles.GoldTeam = extraGamblesViewModel.GoldMedalTeam;
        extraGambles.GoalsInTournament = extraGamblesViewModel.GoalAmount;

        extraGambles.PlayerModelId = player.PlayerModelId;
        extraGambles.GamblingEventId = selectedGamblingEvent.GamblingEventId;

        int storedCount = await _gameDataService.AddExtraGamblesToDatabaseAsync(extraGambles);
        Console.WriteLine("Stored extra gambles for player " + player.ShortName);
        await RefreshPlayersList();
        await OnSelectedPlayerChanged(getPlayerIndexFromList(selectedPlayer.GetPlayerModel()));
    } 






    public async Task OnSavePlayerGamble()
    {
        int removedCount = await _gameDataService.RemoveExistingGamblesForPlayerInEvent(selectedPlayer.GetPlayerModel().PlayerModelId, selectedGamblingEvent.GamblingEventId);
        Console.WriteLine("Removed " + removedCount + " previous gambles for player " + selectedPlayer.Name);

        List<GambleItemModel> newGambles = new();
        foreach (var pred in ListOfGamePredictions)
        {
            GambleItemModel newGamble = new GambleItemModel();

            newGamble.PlayerModelId = selectedPlayer.GetPlayerModel().PlayerModelId;
            newGamble.GameModelId = pred.GameView.GetGameModel().GameModelId;
            newGamble.Guess = pred.Prediction;
            newGambles.Add(newGamble);
        }

        int addedGambles = await _gameDataService.SaveGambles(newGambles);
        Console.WriteLine("Saved " + addedGambles + " gambles for player " + selectedPlayer);

        //OnSavePlayerExtraGambles();

        //already done in the extra gambles.. 

        await RefreshPlayersList();
        await OnSelectedPlayerChanged(getPlayerIndexFromList(selectedPlayer.GetPlayerModel()));
    }

    public int getPlayerIndexFromList(PlayerModel player)
    {
        int index = 0;
        foreach (var item in StoredPlayers)
        {
            if ( item.Name.Equals(player.Name) && item.ShortName.Equals(player.ShortName) && item.Ticket == player.Ticket )
            {
                return index;
            }

            index += 1;
        }
        return 0;
    }

    public async Task OnSavePlayerGambleFromChecksum()
    {
        string tmp = GambleRowChecksumToSave.Trim().ToUpper();
        tmp = tmp.Replace(" ", "");
        tmp = tmp.Replace("A", "H");
        tmp = tmp.Replace("B", "D");
        tmp = tmp.Replace("C", "A");
        if (tmp.Length != StoredGamesInGamblingEvent.Count)
        {
            Console.WriteLine("Invalid checksum len. ChecksumLen = [" + tmp.Length + "]" + " games count = [" + StoredGamesInGamblingEvent.Count + "]");
            return;
        }



        string correctKeys = "HDTA";
        foreach (char c in tmp)
        {
            if (!correctKeys.Contains(c))
            {
                Console.WriteLine("Checksum " + tmp + " has key " + c + " which isnt included in valid keys: " + correctKeys);
                return;
            }
        }

        for (int gameIndex = 0; gameIndex < StoredGamesInGamblingEvent.Count; gameIndex++)
        {
            switch (tmp[gameIndex]) 
            {
                case 'H':
                    ListOfGamePredictions[gameIndex].Prediction = -1;
                    break;
                case 'T':
                case 'D':
                    ListOfGamePredictions[gameIndex].Prediction = 0;
                    break;
                case 'A':
                    ListOfGamePredictions[gameIndex].Prediction = 1;
                    break;
            }
        }

        Console.WriteLine("Saving a gamble row from checksum " + tmp + " to player " + selectedPlayer.Name);
        GambleRowChecksumToSave = "";
        await OnSavePlayerGamble();

    }

    public async Task RefreshPlayersList()
    {
        var playerModels = await _gameDataService.GetPlayerModelsFromDatabaseAsync();
        StoredPlayers = new();


        foreach (PlayerModel playerModel in playerModels)
        {
            StoredPlayers.Add(new PlayerModelViewModel(playerModel));
        }
    }

    public async Task RefreshGamesList()
    {
        var gameModels = selectedGamblingEvent.GamesInEvent;
        StoredGamesInGamblingEvent = new();
        foreach (GameModelViewModel gameModelViewModel in gameModels)
        {
            StoredGamesInGamblingEvent.Add(gameModelViewModel);
        }

        _gameDataService.RefreshTeamsCacheFromList(StoredGamesInGamblingEvent);
    }

    public async Task RefreshNewGamesAndPredictionsList()
    {
        ListOfGamePredictions = new List<GameAndPredictionViewModel>();
        foreach (GameModelViewModel gameView in StoredGamesInGamblingEvent)
        {
            ListOfGamePredictions.Add(new GameAndPredictionViewModel(gameView));
        }
        await Task.CompletedTask; //Just to get rid of the warning
    }

    public async Task RefreshExistingGamblesAndPredictionsList(List<GambleItemModel> existingGamblesForPlayer)
    {
        ListOfGamePredictions = new List<GameAndPredictionViewModel>();
        foreach (GambleItemModel gambleItem in existingGamblesForPlayer)
        {
            ListOfGamePredictions.Add(new GameAndPredictionViewModel(gambleItem));
        }
        await Task.CompletedTask; //Just to get rid of the warning
    }
}

